// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

interface IERC20 { function transferFrom(address from,address to,uint amount) external returns(bool); }
interface IOracleX8 { function getPriceX8(bytes32 symbol) external view returns (uint64 priceX8, uint64 lastTs); }

contract ConditionalRecurringIntent {
    address public immutable owner;
    IERC20  public immutable token;
    address public immutable beneficiary;
    uint256 public immutable amountWei;
    uint256 public immutable periodSeconds;
    IOracleX8 public immutable oracle;
    bytes32 public immutable symbol;
    uint64  public immutable thresholdX8;

    bool public active = true;
    uint256 public lastExecTs;

    error NotOwner(); error NotActive(); error NotDue(); error ConditionMet(); error TransferFailed();

    constructor(
        address _owner, address _token, address _beneficiary,
        uint256 _amountWei, uint256 _periodSeconds,
        address _oracle, bytes32 _symbol, uint64 _thresholdX8
    ){
        owner=_owner; token=IERC20(_token); beneficiary=_beneficiary; amountWei=_amountWei;
        periodSeconds=_periodSeconds; oracle=IOracleX8(_oracle); symbol=_symbol; thresholdX8=_thresholdX8;
    }

    modifier onlyOwner(){ if(msg.sender!=owner) revert NotOwner(); _; }

    function due() public view returns(bool){
        uint256 nextTs = lastExecTs==0 ? 0 : lastExecTs + periodSeconds;
        return block.timestamp >= nextTs;
    }

    function conditionMet() public view returns(bool){
        (uint64 px,) = oracle.getPriceX8(symbol);
        return px > thresholdX8;
    }

    function execute() external {
        if(!active) revert NotActive();
        if(!due()) revert NotDue();
        if(conditionMet()) revert ConditionMet();
        if(!token.transferFrom(owner, beneficiary, amountWei)) revert TransferFailed();
        lastExecTs = block.timestamp;
    }

    function pause() external onlyOwner { active=false; }
    function resume() external onlyOwner { active=true; }
    function cancel() external onlyOwner { active=false; }
}
